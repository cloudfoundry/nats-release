<%
   require 'uri'
   
   def network_config
     networks = spec.networks.marshal_dump

     _, network = networks.find do |_name, network_spec|
       network_spec.default
     end

     if !network
       _, network = networks.first
     end

     if !network
       raise "Could not determine IP via network spec: #{networks}"
     end
     network
   end

   def discover_external_ip
     network_config.ip
   end

   def discover_external_hostname
     network_config.dns_record_name
   end
%>
<% self_host = discover_external_hostname %>
<% self_ip = discover_external_ip %>

<%
  nats_ips = nil
  if_p("nats.machines") { |ips| nats_ips = ips }

  unless nats_ips
    nats_ips = link("nats").instances.map(&:address)
  end
%>

net: "<%= self_ip %>"
port: <%= p("nats.port") %>
prof_port: <%= p("nats.prof_port") %>
monitor_port: <%= p("nats.monitor_port") %>

pid_file: "/var/vcap/sys/run/nats/nats.pid"

debug: <%= p("nats.debug") %>
trace: <%= p("nats.trace") %>
logtime: true

<%= 
password = p("nats.password")
string_escaped_password = password.gsub("\\", "\\\\").gsub("\"", "\\\"") %>
%>

authorization {
  user: "<%= p("nats.user") %>"
  password: "<%= string_escaped_password %>"
  timeout: <%= p("nats.authorization_timeout") %>
}

cluster {
  host: "<%= self_ip %>"
  port: <%= p("nats.port") + 1 %>

  authorization {
    user: "<%= p("nats.user") %>"
    password: "<%= string_escaped_password %>"
    timeout: <%= p("nats.authorization_timeout") %>
  }

  routes = [
    <% (nats_ips - [self_ip] - [self_host]).each do |address| %>
    nats-route://<%= p("nats.user") %>:<%= URI.escape(password) %>@<%= address %>:<%= p("nats.port") + 1 %>
    <% end %>
  ]
}
