// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	bpm_rewriter "code.cloudfoundry.org/nats-v2-migrate/bpm-rewriter"
)

type Rewriter struct {
	RewriteStub        func(string, string) error
	rewriteMutex       sync.RWMutex
	rewriteArgsForCall []struct {
		arg1 string
		arg2 string
	}
	rewriteReturns struct {
		result1 error
	}
	rewriteReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Rewriter) Rewrite(arg1 string, arg2 string) error {
	fake.rewriteMutex.Lock()
	ret, specificReturn := fake.rewriteReturnsOnCall[len(fake.rewriteArgsForCall)]
	fake.rewriteArgsForCall = append(fake.rewriteArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.RewriteStub
	fakeReturns := fake.rewriteReturns
	fake.recordInvocation("Rewrite", []interface{}{arg1, arg2})
	fake.rewriteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Rewriter) RewriteCallCount() int {
	fake.rewriteMutex.RLock()
	defer fake.rewriteMutex.RUnlock()
	return len(fake.rewriteArgsForCall)
}

func (fake *Rewriter) RewriteCalls(stub func(string, string) error) {
	fake.rewriteMutex.Lock()
	defer fake.rewriteMutex.Unlock()
	fake.RewriteStub = stub
}

func (fake *Rewriter) RewriteArgsForCall(i int) (string, string) {
	fake.rewriteMutex.RLock()
	defer fake.rewriteMutex.RUnlock()
	argsForCall := fake.rewriteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Rewriter) RewriteReturns(result1 error) {
	fake.rewriteMutex.Lock()
	defer fake.rewriteMutex.Unlock()
	fake.RewriteStub = nil
	fake.rewriteReturns = struct {
		result1 error
	}{result1}
}

func (fake *Rewriter) RewriteReturnsOnCall(i int, result1 error) {
	fake.rewriteMutex.Lock()
	defer fake.rewriteMutex.Unlock()
	fake.RewriteStub = nil
	if fake.rewriteReturnsOnCall == nil {
		fake.rewriteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.rewriteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Rewriter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.rewriteMutex.RLock()
	defer fake.rewriteMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Rewriter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ bpm_rewriter.Rewriter = new(Rewriter)
